Introduction
============

This project started as the porting to C++ of my master thesis project
developed with Matlab.


How to build
============

The project is mantained in a git repository. The more stable version is
in the 'master' branch, while the currently developed version is in the
'develop' branch.
The build tool used is CMake.
The following libraries are required:
- Boost
  + filesystem
  + program-options
  + signals2
  + system
  + test (for tests only)
  + thread
- IT++
- libSVM
- Rlog
- JACK

In order to build, first checkout the project, either with:
    $ git clone git@git.assembla.com:svmacs.git
for the stable version, or with:
    $ git clone git@git.assembla.com:svmacs.git -b develop
for the development version.

then change to the project dir:
    $ cd svmacs
    $ mkdir build && cd build
and configure the project build:
    $ cmake -i ..

Finally build the project:
    $ make
or, if you have more than one core/processor, say 2:
    $ make -j 2

You can run all the tests (if enabled):
    $ ctest

Optionally, you can either build a zip package with:
    $ make package
or install the program (default to /opt/svmacs)
    $ make install
The install path can be configured using the
CMAKE_INSTALL_PATH variable or directly passed to make:
    $ make install DESTDIR=/my/custom/path

Uninstall with:
    $ make uninstall
or:
    $make uninstall DESTDIR=/my/custom/path
if DESTDIR has been used.


How to run
==========

First, launch JACK with a sample rate of 22050 and *NO* realtime
(actually enabling realtime in JACK causes the client to zombify).

Then launch the program:
    $ ./svmacs

and make the connection to JACK.
You can use the sample audio file 'online-5db.wav' provided with sources.

Default parameters can be overridden either using the command line
or defined in the configuration file.
Please launch with the '--help' or '-h' option for details.


Additional Information
======================

For any questions and comments, please email me at: dapicester@gmail.com

